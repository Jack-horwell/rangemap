% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ranges_emaps.R
\name{ranges_emaps}
\alias{ranges_emaps}
\title{Species ranges on maps of environmental factors}
\usage{
ranges_emaps(ranges, occurrences, new_occurrences, variables,
  save_fig = FALSE)
}
\arguments{
\item{ranges}{(list) of SpatialPolygons or SpatialPolygonsDataFrame or a
list of objects produced with any of the following functions:
\code{\link{rangemap_buff}}, \code{\link{rangemap_bound}}, \code{\link{rangemap_hull}},
\code{\link{rangemap_enm}}, and \code{\link{rangemap_tsa}}. For visualization purposes,
using up to three ranges are allowed.}

\item{variables}{a RasterStack object of environmental variables that will be used for
representing the environmental factors.}

\item{save_fig}{(logical) if TRUE the figure will be written in the working directory. Default = FALSE.}

\item{add_occurrences}{(logical) if TRUE, species occurrences contained in one of the elements of
the list \code{ranges} will be ploted in the figure. Default = TRUE. If the none of the ranges
contains occurrences (e.g. a list of one object created with the \code{\link{rangemap_bound}}
function in which occurrences were not used), this parameter will be ignored.}

\item{name}{(character) if \code{save_fig} = TRUE, name of the figure to be exported. Default = "range_fig".}

\item{format}{(character) if \code{save_fig} = TRUE, format in which the figure will be written. Options
include "bmp", "png", "jpeg", "tiff", and "pdf". Default = "png".}

\item{resolution}{(numeric) if \code{save_fig} = TRUE, resolution (ppi) in wich the figure will be exported.
Default = 300.}

\item{width}{(numeric) if \code{save_fig} = TRUE, width of the figure in mm. Default = 166.}

\item{height}{(numeric) if \code{save_fig} = TRUE, height of the figure in mm. Default = 166.}
}
\value{
A figure showing species ranges on maps of environmental factors. Ranges should be
generated with any of the functions: \code{\link{rangemap_buff}}, \code{\link{rangemap_bound}},
\code{\link{rangemap_hull}}, \code{\link{rangemap_enm}}, and \code{\link{rangemap_tsa}}.
}
\description{
ranges_emaps represents one or more ranges of the same species on
various maps of environmental factors (e.g. climatic variables) to detect implications
of using one or other type of range regarding the environmental conditions in the areas.
}
\examples{
if(!require(rgbif)){
install.packages("rgbif")
library(rgbif)
}

# getting the data from GBIF
species <- name_lookup(query = "Dasypus kappleri",
                       rank="species", return = "data") # information about the species

occ_count(taxonKey = species$key[14], georeferenced = TRUE) # testing if keys return records

key <- species$key[14] # using species key that return information

occ <- occ_search(taxonKey = key, return = "data") # using the taxon key

# keeping only georeferenced records
occ_g <- occ[!is.na(occ$decimalLatitude) & !is.na(occ$decimalLongitude),
             c("name", "decimalLongitude", "decimalLatitude")]


# range based on buffers
dist <- 500000

buff <- rangemap_buff(occurrences = occ_g, buffer_distance = dist)


# range based on boundaries
## checking which countries may be involved in the analysis
rangemap_explore(occurrences = occ_g)

level <- 0
adm <- "Ecuador" # Athough no record is on this country, we know it is in Ecuador

countries <- c("PER", "BRA", "COL", "VEN", "ECU", "GUF", "GUY", "SUR", "BOL")

bound <- rangemap_bound(occurrences = occ_g, adm_areas = adm, country_code = countries,
                        boundary_level = level)


# range based on concave hulls
dist1 <- 250000
hull1 <- "concave"

concave <- rangemap_hull(occurrences = occ_g, hull_type = hull1, buffer_distance = dist1)

# range based on convex disjunct hulls
split <- TRUE
hull2 <- "convex"

convex <- rangemap_hull(occurrences = occ_g, hull_type = hull2, buffer_distance = dist1,
                         split = TRUE, cluster_method = "k-means", n_k_means = 3)

# ranges representation on environmental factor maps
## list of ranges
ranges <- list(buff, concave, convex)
names(ranges) <- c("buff", "concave", "convex")

## other data for environmental comparisson
if(!require(raster)){
  install.packages("raster")
  library(raster)
}
if(!require(maps)){
install.packages("maps")
library(maps)
}

vars <- getData("worldclim", var = "bio", res = 5)

## mask variables to region of interest
WGS84 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
w_map <- map(database = "world", regions = c("Ecuador", "Peru", "Bolivia", "Colombia", "Venezuela",
                                             "Suriname", "Guyana", "French Guyana"),
             fill = TRUE, plot = FALSE) # map of the world
w_po <- sapply(strsplit(w_map$names, ":"), function(x) x[1]) # preparing data to create polygon
reg <- map2SpatialPolygons(w_map, IDs = w_po, proj4string = WGS84) # map to polygon

e <- extent(reg)
mask <- as(e, 'SpatialPolygons')

variables <- crop(vars, mask)

## comparison
env_comp <- ranges_envcomp(occurrences = occ_g, ranges = ranges, variables = variables)
}
