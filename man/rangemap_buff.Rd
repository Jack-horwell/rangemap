% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rangemap_buff.R
\name{rangemap_buff}
\alias{rangemap_buff}
\title{Species distributional ranges based on buffered occurrences}
\usage{
rangemap_buff(occurrences, distance = 1e+05, polygons, save_shp = FALSE,
  name)
}
\arguments{
\item{occurrences}{a data.frame containing species occurrences, columns must be:
Species, Longitude, and Latitude. Geographic coordinates must be in decimal degrees}

\item{distance}{(numeric) distance, in meters, to be used for creating the buffer areas
around occurrences, default = 100000.}

\item{polygons}{(optional) a SpatialPolygon object that will be clipped with the buffer areas
to create species ranges based on actual limits. Projection must be Geographic (longitude, latitude).
If not defined, a default, simple world map will be used.}

\item{save_shp}{(logical) if TRUE shapefiles of the species range, extent of occurrence and area of
occupancy will be written in the working directory.}

\item{name}{(character) valid if save_shp TRUE. The name of the shapefile to be exported.}
}
\value{
A named list containing a data.frame with information about the species range and
SpatialPolygonDataFrame objects of the species range, extent of occurrence, and area of occupancy;
all in Azimuthal equal area projection. If save_shp = TRUE, written shapefiles' projections
will be the same as the SpatialPolygonDataFrame objects.
}
\description{
rangemap_buff generates SpatialPolygonsDataFrame objects of a species range, and
extent of occurrence and area of occupancy according to the UICN criteria. The species
range is calculated by buffering provided occurrences using a defined distance. Shapefiles
of the results can be saved in the working directory if it is needed.
}
\examples{
if(!require(rgbif)){
install.packages("rgbif")
library(rgbif)
}

# getting the data from GBIF
species <- name_lookup(query = "Peltophryne empusa",
                       rank="species", return = "data") # information about the species

occ_count(taxonKey = species$key[1], georeferenced = TRUE) # testing if keys return records

key <- species$key[1] # using species key that return information

occ <- occ_search(taxonKey = key, return = "data") # using the taxon key

# keeping only georeferenced records
occ_g <- occ[!is.na(occ$decimalLatitude) & !is.na(occ$decimalLongitude),
            c("name", "decimalLongitude", "decimalLatitude")]

# buffer distance
dist <- 100000
save <- TRUE
name <- "test"

buff_range <- rangemap_buff(occurrences = occ_g, distance = dist,
                            save_shp = save, name = name)
}
