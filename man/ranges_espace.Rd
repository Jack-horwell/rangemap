% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ranges_espace.R
\name{ranges_espace}
\alias{ranges_espace}
\title{Comparison of species ranges in environmental space}
\usage{
ranges_espace(ranges, occurrences = TRUE, variables, max_background = 25000,
  ranges_representation = "clouds", background_color = "darkolivegreen",
  range_colors, eye_camera = c(x = 1.95, y = 1.25, z = 1.35),
  save_fig = FALSE, name = "ranges_espace", width = 1000, height = 800)
}
\arguments{
\item{ranges}{object or list of objects produced with any of the following functions:
\code{\link{rangemap_buff}}, \code{\link{rangemap_bound}}, \code{\link{rangemap_hull}},
\code{\link{rangemap_enm}}, and \code{\link{rangemap_tsa}}. For visualization purposes,
using up to three ranges is recommended.}

\item{occurrences}{(logical) if TRUE, species occurrences contained in the list of \code{ranges}
will be ploted in the figure. Default = TRUE. If the none of the ranges contains occurrences
(e.g. a list of one object created with the \code{\link{rangemap_bound}} function in which occurrences
were not used), this parameter will be ignored.}

\item{variables}{a RasterStack object of environmental variables that will be used for
creating the principal components to represent the environmental space.}

\item{max_background}{(numeric) maximum number of data from variables to be used for representation
of the environmental space. Default = 25000. Increasing this number results in more detailed
views of the available environment but preforming analyses will take longer.}

\item{ranges_representation}{(character) form in which the environmental space withing the ranges
will be represented. Options are "clouds" and "ellipsoids". Default = "clouds".}

\item{background_color}{color of the background to be ploted. Default = "darkolivegreen". Since
transparency is used for representing most of components of the plot, colors may look different.}

\item{range_colors}{vector of colors of the ranges to be represented. If not defined, default colors
will be used. Since transparency is used for representing most of components of the plot,
colors may look different.}

\item{eye_camera}{(numeric) vector of length three defining the adjustment of the camera when plottin
de figure. Default = c(x = 1.95, y = 1.25, z = 1.35). This argument will be passed to parameter
eye of the list of parameters of camera in \code{\link[plotly]{layout}}.}

\item{save_fig}{(logical) if TRUE a figure in format = svg will be written in the browser
download directory.}

\item{name}{(character) if \code{save_fig} = TRUE, name of the figure to be exported.
Default = "ranges_espace".}

\item{width}{(numeric) if \code{save_fig} = TRUE, width of the figure in pixels. Default = 1000.}

\item{height}{(numeric) if \code{save_fig} = TRUE, height of the figure in pixels. Default = 800.}
}
\value{
A figure showing, in the environmental space, the species ranges generated with any
of the functions: \code{\link{rangemap_buff}}, \code{\link{rangemap_bound}},
\code{\link{rangemap_hull}}, \code{\link{rangemap_enm}}, and \code{\link{rangemap_tsa}}.
}
\description{
ranges_espace generates a three dimensional comparison of a species'
ranges created using distinct algortihms, to visualize implications of selecting
one of them if environmental conditions are considered.
}
\details{
.
}
\examples{
if(!require(rgbif)){
install.packages("rgbif")
library(rgbif)
}

# getting the data from GBIF
species <- name_lookup(query = "Dasypus kappleri",
                       rank="species", return = "data") # information about the species

occ_count(taxonKey = species$key[14], georeferenced = TRUE) # testing if keys return records

key <- species$key[14] # using species key that return information

occ <- occ_search(taxonKey = key, return = "data") # using the taxon key

# keeping only georeferenced records
occ_g <- occ[!is.na(occ$decimalLatitude) & !is.na(occ$decimalLongitude),
             c("name", "decimalLongitude", "decimalLatitude")]

# range based on boundaries
level <- 0
adm <- "Ecuador" # Athough no record is on this country, we know it is in Ecuador

countries <- c("PER", "BRA", "COL", "VEN", "ECU", "GUF", "GUY", "SUR", "BOL")

bound <- rangemap_bound(occurrences = occ_g, adm_areas = adm, country_code = countries,
                        boundary_level = level)


# range based on concave hulls
dist1 <- 250000
hull1 <- "concave"

concave <- rangemap_hull(occurrences = occ_g, hull_type = hull1, buffer_distance = dist1)


# ranges comparison in environmental space
## list of ranges
ranges <- list(bound, concave)
names(ranges) <- c("bound", "concave")

## other data for environmental comparisson
if(!require(raster)){
  install.packages("raster")
  library(raster)
}
if(!require(maps)){
install.packages("maps")
library(maps)
}

vars <- getData("worldclim", var = "bio", res = 5)

## mask variables to region of interest
WGS84 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
w_map <- map(database = "world", regions = c("Ecuador", "Peru", "Bolivia", "Colombia", "Venezuela",
                                             "Suriname", "Guyana", "French Guyana"),
             fill = TRUE, plot = FALSE) # map of the world
w_po <- sapply(strsplit(w_map$names, ":"), function(x) x[1]) # preparing data to create polygon
reg <- map2SpatialPolygons(w_map, IDs = w_po, proj4string = WGS84) # map to polygon

e <- extent(reg)
mask <- as(e, 'SpatialPolygons')

variables <- crop(vars, mask)

## comparison
env_comp <- ranges_espace(occurrences = occ_g, ranges = ranges, variables = variables)
}
