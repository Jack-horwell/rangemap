% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ranges_espace.R
\name{ranges_espace}
\alias{ranges_espace}
\title{Comparison of species ranges in environmental space}
\usage{
ranges_espace(ranges, add_occurrences = TRUE, variables,
  max_background = 25000, ranges_representation = "clouds",
  background_color = "darkolivegreen", range_colors = NULL,
  eye_camera = c(x = 1.95, y = 1.25, z = 1.35))
}
\arguments{
\item{ranges}{object or list of objects produced with any of the following functions:
\code{\link{rangemap_buff}}, \code{\link{rangemap_bound}}, \code{\link{rangemap_hull}},
\code{\link{rangemap_enm}}, and \code{\link{rangemap_tsa}}. For visualization purposes,
using up to three ranges is recommended.}

\item{add_occurrences}{(logical) if TRUE, species occurrences contained in one of the elements of
the list \code{ranges} will be ploted in the figure. Default = TRUE. If the none of the ranges
contains occurrences (e.g. a list of one object created with the \code{\link{rangemap_bound}}
function in which occurrences were not used), this parameter will be ignored.}

\item{variables}{a RasterStack object of environmental variables that will be used for
creating the principal components to represent the environmental space. Projection is assumed
to be Geographic (longitude and latitude).}

\item{max_background}{(numeric) maximum number of data from variables to be used for representation
of the environmental space. Default = 25000. Increasing this number results in more detailed
views of the available environment but preforming analyses will take longer.}

\item{ranges_representation}{(character) form in which the environmental space withing the ranges
will be represented. Options are "clouds" and "ellipsoids". Default = "clouds".}

\item{background_color}{color of the background to be ploted. Default = "darkolivegreen". Since
transparency is used for representing most of components of the plot, colors may look different.}

\item{range_colors}{vector of colors of the ranges to be represented. If not defined, default = NULL
and default colors will be used. Since transparency is used for representing most of components of
the plot, colors may look different.}

\item{save_fig}{(logical) if TRUE the figure will be written in the working directory. Default = FALSE.}

\item{name}{(character) if \code{save_fig} = TRUE, name of the figure to be exported. Default = "range_fig".}

\item{format}{(character) if \code{save_fig} = TRUE, format in which the figure will be written. Options
include "bmp", "png", "jpeg", "tiff", and "pdf". Default = "png".}

\item{resolution}{(numeric) if \code{save_fig} = TRUE, resolution (ppi) in wich the figure will be exported.
Default = 300.}

\item{width}{(numeric) if \code{save_fig} = TRUE, width of the figure in mm. Default = 166.}

\item{height}{(numeric) if \code{save_fig} = TRUE, height of the figure in mm. Default = 166.}
}
\value{
A figure showing, in the environmental space, the species ranges generated with any
of the functions: \code{\link{rangemap_buff}}, \code{\link{rangemap_bound}},
\code{\link{rangemap_hull}}, \code{\link{rangemap_enm}}, and \code{\link{rangemap_tsa}}.
}
\description{
ranges_espace generates a three dimensional comparison of a species'
ranges created using distinct algortihms, to visualize implications of selecting
one of them if environmental conditions are considered.
}
\examples{
if(!require(rgbif)){
install.packages("rgbif")
library(rgbif)
}

# getting the data from GBIF
species <- name_lookup(query = "Dasypus kappleri",
                       rank="species", return = "data") # information about the species

occ_count(taxonKey = species$key[14], georeferenced = TRUE) # testing if keys return records

key <- species$key[14] # using species key that return information

occ <- occ_search(taxonKey = key, return = "data") # using the taxon key

# keeping only georeferenced records
occ_g <- occ[!is.na(occ$decimalLatitude) & !is.na(occ$decimalLongitude),
             c("name", "decimalLongitude", "decimalLatitude")]

# range based on buffers
dist <- 500000

buff <- rangemap_buff(occurrences = occ_g, buffer_distance = dist)


# range based on concave hulls
dist1 <- 250000
hull1 <- "concave"

concave <- rangemap_hull(occurrences = occ_g, hull_type = hull1, buffer_distance = dist1)


# ranges comparison in environmental space
## list of ranges
ranges <- list(buff, concave)
names(ranges) <- c("buff", "concave")

## other data for environmental comparisson
if(!require(raster)){
  install.packages("raster")
  library(raster)
}
if(!require(maps)){
install.packages("maps")
library(maps)
}

vars <- getData("worldclim", var = "bio", res = 5)

## mask variables to region of interest
WGS84 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
w_map <- map(database = "world", regions = c("Ecuador", "Peru", "Bolivia", "Colombia", "Venezuela",
                                             "Suriname", "Guyana", "French Guyana", "Brazil"),
             fill = TRUE, plot = FALSE) # map of the world
w_po <- sapply(strsplit(w_map$names, ":"), function(x) x[1]) # preparing data to create polygon
reg <- map2SpatialPolygons(w_map, IDs = w_po, proj4string = WGS84) # map to polygon

e <- extent(reg)
mask <- as(e, 'SpatialPolygons')

variables <- crop(vars, mask)

## comparison
occur <- TRUE
env_comp <- ranges_espace(ranges = ranges, add_occurrences = occur, variables = variables)


# now play around, zoom in and rotate the figure

# saving this figure may be challenging, try using
# the following lines of code and check your download directory

op <- options() # save default options
options(viewer = NULL) # Set viewer to web browser
name <- "ranges_space" # name for figure

# using web browser to save image
p \%>\% htmlwidgets::onRender(
  paste("function(el, x)
          {var gd = document.getElementById(el.id);
          Plotly.downloadImage(gd, {format: 'svg', width: ", 1000, ", height: ",
        800, ", filename: ", paste("\\'", name, "\\'", sep = ""), "});
          }", sep = "")
)

Sys.sleep(2) # wait for the execution
options(viewer = op$viewer) # restore viewer to old setting (e.g. RStudio)
}
