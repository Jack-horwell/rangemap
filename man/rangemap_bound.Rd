% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rangemap_bound.R
\name{rangemap_bound}
\alias{rangemap_bound}
\title{Species distributional ranges based on political boundaries}
\usage{
rangemap_bound(occurrences, country_code, boundary_level = 0, polygons,
  disolve = TRUE, save_shp = FALSE, name)
}
\arguments{
\item{occurrences}{a data.frame containing species occurrences, columns must be:
Species, Longitude, and Latitude.}

\item{country_code}{(character) vector of country codes that will be considered when
creating the species range. Codes follow the ISO-3166-1 norm as in function \code{\link[raster]{getData}}.}

\item{boundary_level}{(numeric) the level of the administrative boundaries from 0 to 5 (0 is
the country and higher values equal finer divisions), default = 0.}

\item{polygons}{(optional) a SpatialPolygon object that will be used instead of boundaries
to create species ranges based on overlapping of species records with these layer. If defined,
argument boundaries will not be considered.}

\item{disolve}{(logical) if TRUE distint polygons selected as part of the species range will
be disolved for creating simpler polygons, default = TRUE.}

\item{save_shp}{(logical) if TRUE shapefiles of the species range, extent of occurrence and area of
occupancy will be written in the working directory.}

\item{name}{(character) valid if save_shp TRUE. The name of the shapefile to be exported.}
}
\value{
A named list containing a data.frame with information about the species range, a
SpatialPolygon object of the species range in Geographic projection, and the same SpatialPolygon
object projected to the Azimuthal equal area projection.
}
\description{
rangemap_bound generates a species range polygon for a given species
by considering all the polygons of political entities in which the species has
been detected. Shape files can be saved in the working directory if it is needed.
}
\details{
Boundaries used are loaded using the \code{\link[raster]{getData}} funcion.
}
\examples{
if(!require(rgbif)){
install.packages("rgbif")
library(rgbif)
}

# getting the data from GBIF
occ <- occ_search(taxonKey = 2440788, return = "data")

# keeping only georeferenced records
occ_g <- occ[!is.na(occ$decimalLatitude) & !is.na(occ$decimalLongitude),
            c("name", "decimalLongitude", "decimalLatitude")]

level <- 0
disolve <- TRUE
save <- TRUE
name <- "test"
countries <- c("PER", "BRA", "COL", "VEN", "ECU", "GUF", "GUY", "SUR")

bound_range <- rangemap_bound(occurrences = occ_g, country_code = countries, boundary_level = level,
                              disolve = disolve, save_shp = save, name = name)
}
