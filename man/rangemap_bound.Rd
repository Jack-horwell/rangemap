% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rangemap_bound.R
\name{rangemap_bound}
\alias{rangemap_bound}
\title{Species distributional ranges based on political boundaries}
\usage{
rangemap_bound(occurrences, adm_areas, country_code, boundary_level = 0,
  polygons, kept_data = FALSE, dissolve = FALSE, save_shp = FALSE, name)
}
\arguments{
\item{occurrences}{a data.frame containing species occurrences, columns must be:
Species, Longitude, and Latitude. If not defined, adm_areas must be defined and areas specified
in there will be used as part of the species range.}

\item{adm_areas}{(character) a vector of names of administrative areas known to be occupied by
the species, names depend on the boundary_level selected. Check \code{\link{adm_areas}} data
documentation for an idea of how to define names in this parameter. If not defined, occurrences
must exist.}

\item{country_code}{(character) vector of country codes that will be considered when
creating the species range. If country selection is required to be only based on occurrences,
including neighbor countries is not necessary. Use \code{\link{rangemap_explore}} for a preview
of potential countries involved in the analysis. Codes follow the ISO-3166-1 norm as in function
\code{\link[raster]{getData}}. If not defined, polygons must be included. Ignored if polygons
are included.}

\item{boundary_level}{(numeric) the level of the administrative boundaries from 0 to 5 (0 is
the country and higher values equal finer divisions), default = 0. Ignored if polygons are
included.}

\item{polygons}{(optional) a SpatialPolygonDataFrame object that will be used instead of boundaries
especified in country_code to create species ranges based on overlapping of species records
with these layer as well as names defined in adm_areas. Projection must be Geographic (longitude,
latitude). If adm_areas is defined, polygons must have, as part of data, a fied (column) named
"adm_areas" for selecting extra areas based on the names of defined administrative areas.
If defined, arguments country_code and boundary level will be ignored.}

\item{kept_data}{(logical) if TRUE and polygons is not defined, data dowloaded from the GADM data
base will be kept in the working directory. Useful if all or the part of the downloaded polygons
for the creation of an species range area will be used in posterior analyses because those polygons
will not be downloaded again and time will be saved. Default = FALSE.}

\item{dissolve}{(logical) if TRUE distint polygons selected as part of the species range will
be disolved for creating simpler polygons, default = FALSE. The dissolving process may take some
more time, especially if species with broad distributions are being analyzed.}

\item{save_shp}{(logical) if TRUE shapefiles of the species range, extent of occurrence and area of
occupancy will be written in the working directory, default = FALSE.}

\item{name}{(character) valid if save_shp TRUE. The name of the shapefile to be exported.}
}
\value{
A named list containing a data.frame with information about the species range, a
SpatialPolygon object of the species range in Geographic projection, and the same SpatialPolygon
object projected to the Azimuthal equal area projection.
}
\description{
rangemap_bound generates a species range polygon for a given species
by considering all the polygons of political entities in which the species has
been detected. An approach to the species extent of occurrence (using convex hulls) and the
area of occupancy according to the IUCN criteria are also generated. Shape files can be saved
in the working directory if it is needed.
}
\details{
Boundaries for countries defined in country_code are loaded using the
\code{\link[raster]{getData}} funcion.
}
\examples{
if(!require(rgbif)){
install.packages("rgbif")
library(rgbif)
}

# getting the data from GBIF
species <- name_lookup(query = "Dasypus kappleri",
                       rank="species", return = "data") # information about the species

occ_count(taxonKey = species$key[14], georeferenced = TRUE) # testing if keys return records

key <- species$key[14] # using species key that return information

occ <- occ_search(taxonKey = key, return = "data") # using the taxon key

# keeping only georeferenced records
occ_g <- occ[!is.na(occ$decimalLatitude) & !is.na(occ$decimalLongitude),
            c("name", "decimalLongitude", "decimalLatitude")]

# checking which countries may be involved in the analysis
rangemap_explore(occurrences = occ_g)

level <- 0
adm <- "Ecuador" # Athough no record is on this country, we know it is in Ecuador
dissolve <- FALSE
save <- TRUE
name <- "test"
countries <- c("PER", "BRA", "COL", "VEN", "ECU", "GUF", "GUY", "SUR", "BOL")

bound_range <- rangemap_bound(occurrences = occ_g, adm_areas = adm, country_code = countries,
                              boundary_level = level, dissolve = dissolve, save_shp = save, name = name)
}
